target: (RGBA buffer) || (index buffer) || (stencil buffer)

stencil: (stencil buffer) || NULL
stencilflip: boolean
stenciloffset: x, y
stencilorigin: SCREEN || WORLD || OBJECT
stencilwrap: NONE || SCALE || WRAP

fillp: 64 bits
fillpoffset: x, y
fillporigin: SCREEN || WORLD || OBJECT (???)
        <-------------------------- This is super jank, the offset and origin might interact strangely

instead of "origins" these might be coordinate spaces (i.e. stencil OBJECT + SCALE)

cliprect: x1, y1, x2, y2, flip (boolean)
cliprectorigin: SCREEN || WORLD

spritesheet: (RGBA buffer) || (index buffer) || NULL
spriteparams: width, height

palette: (map from index -> RGBA) || NULL
palettemap: (map from index -> index)
palettemask: (map from index -> boolean)

camera: x, y, angle, zoom
screenshader: (screen shader effect)
altcolor: (RGBA color) || (index color) <-- Default (0, 0, 0, 0) or -1
    Used for fillp and shapes that have a second color. Default to clear/transparent
borderwidth: (unsigned int)
    Thickness of text outline and border [b] functions
window: width, height, scale
    Dimensions of internal framebuffer, and scaling factor of viewport


drawopts is [c1, ang, sx, sy] or [r, g, b, a, ang, sx, sy]

f -- float RGBA
b -- border
t -- texture <-- IMPORTANT

[ft]cls(COLOR)
~~~ [f]pix(x, y, COLOR) ~~~ <--- Don't do this
[fbt]rect(x1, y1, x2, y2, drawopts)
[fbt]circ(x, y, r, drawopts)
[fbt]oval(x, y, r1, r2, drawopts)
[fbt]line(x1, y1, x2, y2, w, drawopts)
[fbt]text(x, y, string, w, drawopts)
[fbt]poly(N, coord + color/UV groups) <-- this is harder


poly was only [fbt]
poly should create a buffer object so that future calls are faster, like a "create shape" function, but this is future work -- this draw function should take some kind of shape literal every time
can optimize poly by using vertex shader properly, or can use the vertex shader to render one triangle for multiple overlapping minimal bounding boxes
maybe have tri function?
poly should call rect, line, or tri when appropriate


[t] (circ, oval, text) are weird


getBufferType(bufferID) --> BUFFER_RGBA || BUFFER_INDEX || BUFFER_STENCIL

[f]pget(bufferID, x, y)
[f]pset(bufferID, x, y, COLOR)
flushBuffer(bufferID)

pget will load chunk from buffer into memory, but not set the dirty bit
pset will load chunk from buffer into memory, modify the chunk, and set the dirty bit

------------------------------TODO------------------------------
How to do input?

------------------------------Possible future stuff------------------------------
font: "spritesheet" used for text rendering
camera manipulation functions similar to matrix multiplications
